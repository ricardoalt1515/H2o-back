# .github/workflows/deploy.yml
name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Build, Test & Deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: hydrous-backend
      ECS_CLUSTER: hydrous-cluster
      ECS_SERVICE: hydrous-backend-service
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Si tienes dependencias de desarrollo separadas:
          # pip install -r requirements-dev.txt

      # Cuando tengas pruebas, descomenta esto:
      # - name: Run tests
      #   run: pytest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Crear un directorio para logs y backups
      - name: Setup deployment logs
        run: |
          mkdir -p deploy-logs
          VERSION=$(date +%Y%m%d%H%M)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      # Guardar informaci√≥n para rollback
      - name: Backup current deployment for rollback
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].taskDefinition' --output text)
          echo "Definici√≥n de tarea actual: $CURRENT_TASK_DEF"
          echo $CURRENT_TASK_DEF > deploy-logs/last-working-task-${{ env.VERSION }}.txt
          echo "‚úÖ Informaci√≥n de rollback guardada"

      # Construir y subir la imagen Docker
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Construir la imagen Docker con versi√≥n y latest
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.VERSION }} -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest .
          
          # Subir la imagen a ECR
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.VERSION }}
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          
          echo "‚úÖ Imagen subida a ECR correctamente"
          
      # Actualizar el servicio ECS
      - name: Deploy to ECS
        run: |
          echo "üöÄ Actualizando servicio ECS..."
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
          echo "‚úÖ Servicio ECS actualizado correctamente"
          
      # Registrar la informaci√≥n de versi√≥n
      - name: Register deployment version
        run: |
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Versi√≥n ${{ env.VERSION }} desplegada" >> deploy-logs/deploy-history.log
          
      # Guardar logs como artefactos
      - name: Upload deployment logs
        uses: actions/upload-artifact@v2
        with:
          name: deployment-logs
          path: deploy-logs/
          
      - name: Deployment summary
        run: |
          echo "‚úÖ ¬°Despliegue iniciado exitosamente!"
          echo "La aplicaci√≥n estar√° disponible en unos minutos en: https://api.h2oassistant.com"
          echo "Versi√≥n desplegada: ${{ env.VERSION }}"
          echo ""
          echo "Para monitorear el despliegue:"
          echo "aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].deployments'"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Despliegue exitoso a producci√≥n"
          else
            echo "‚ùå Error en el despliegue a producci√≥n"
          fi